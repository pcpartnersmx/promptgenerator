
import { streamText } from 'ai';
import { openai } from '@ai-sdk/openai';

export async function POST(request: Request) {
    try {
        const { input } = await request.json();

        if (!input) {
            return new Response(JSON.stringify({ error: "No se proporcion√≥ input" }), {
                status: 400,
                headers: { "Content-Type": "application/json" },
            });
        }

        console.log("üîç Iniciando b√∫squeda web para:", input);

        // Modificar el prompt para forzar b√∫squeda web
        const enhancedPrompt = `${input} 
         
         IMPORTANTE: Para responder a esta solicitud, DEBES usar la herramienta de b√∫squeda web para obtener informaci√≥n actualizada y precisa. No respondas bas√°ndote √∫nicamente en tu conocimiento previo.
         IMPORTANTE: No utilices ningun formato de respuesta, solo responde en texto plano.
         CR√çTICO: Si el prompt tiene m√∫ltiples fases (FASE 1, FASE 2, FASE 3, etc.), DEBES completar TODAS las fases en una sola respuesta continua. NO te detengas despu√©s de la primera fase. Contin√∫a autom√°ticamente con todas las fases siguientes sin esperar confirmaci√≥n del usuario.
         
         INSTRUCCIONES DE CONTINUIDAD:
         - Completa FASE 1, luego inmediatamente contin√∫a con FASE 2
         - Despu√©s de FASE 2, inmediatamente contin√∫a con FASE 3
         - No escribas "Listo, hemos completado..." o "Ahora contin√∫o autom√°ticamente..."
         - Simplemente contin√∫a con la siguiente fase sin pausas ni confirmaciones
         `;

        const result = await streamText({
            model: openai('gpt-4o'),
            prompt: enhancedPrompt,
            tools: {
                web_search: openai.tools.webSearch({}),
            },
            toolChoice: 'auto',
            onStepFinish: (step) => {
                console.log(`üìù Paso completado`);
                if (step.toolCalls && step.toolCalls.length > 0) {
                    console.log("üåê Herramientas de b√∫squeda web utilizadas:", step.toolCalls);
                    step.toolCalls.forEach(call => {
                        if (call.toolName === 'web_search') {
                            console.log("üîç B√∫squeda realizada:", call);
                        }
                    });
                }
            }
        });

        return result.toTextStreamResponse();
    } catch (error) {
        console.error("Error en API de OpenAI:", error);
        return new Response(JSON.stringify({ error: "Error interno del servidor" }), {
            status: 500,
            headers: { "Content-Type": "application/json" },
        });
    }
}
